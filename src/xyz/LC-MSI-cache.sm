
machine(MachineType:L1Cache, "LC-MSI cache")
  : 
    // Sequencer* sequencer;
    CacheMemory *cacheMemory;
    XYZStatsObject *xyzStatsObject;
    // propagated from python script, do not modify here
    Cycles responseBusLatency := 1;
    MessageBuffer * requestFromL0,  network="From", virtual_network="4", vnet_type="prv_req";
    MessageBuffer * forwardToL0,    network="To", virtual_network="4", vnet_type="prv_req";
    MessageBuffer * responseToL0,   network="To", virtual_network="5", vnet_type="prv_resp";
    MessageBuffer * responseFromL0, network="From", virtual_network="5", vnet_type="prv_resp";

    MessageBuffer * requestToDir, network="To", virtual_network="0", vnet_type="request";
    MessageBuffer * responseToDirOrSibling, network="To", virtual_network="2", vnet_type="response";

    MessageBuffer * forwardFromDir, network="From", virtual_network="1", vnet_type="forward";
    MessageBuffer * responseFromDirOrSibling, network="From", virtual_network="2", vnet_type="response";

    // TODO: add dedicated links to the directory
    bool splitBus;
    MessageBuffer * responseToDirOnly, network="To", virtual_network="6", vnet_type="response";
    MessageBuffer * responseFromDirOnly, network="From", virtual_network="6", vnet_type="response";

{
  state_declaration(State, desc="Cache states") {
    I,      AccessPermission:Invalid,
                desc="Not present/Invalid";

    // States moving out of I
    IS_D,   AccessPermission:Busy,
                desc="Invalid, moving to S, waiting for data";
    IM_AD,  AccessPermission:Busy,
                desc="Invalid, moving to M, waiting for acks and data";
    IM_A,   AccessPermission:Read_Only,
                desc="Invalid, moving to M, waiting for acks";

    S,      AccessPermission:Read_Only,
                desc="Shared. Read-only, other caches may have the block";

    // States moving out of S
    SM_AD,  AccessPermission:Busy,
                desc="Shared, moving to M, waiting for acks and 'data'";
    SM_A,   AccessPermission:Read_Only,
                desc="Shared, moving to M, waiting for acks";

    M,      AccessPermission:Read_Write,
                desc="Modified. Read & write permissions. Owner of block";
    M_P,      AccessPermission:Busy,
                desc="Privately cached";
    MP_D,      AccessPermission:Busy,
                desc="Privately cached, Inv sent, waiting for data";
    // States moving to Invalid
    MI_A,   AccessPermission:Read_Only,
                desc="Was modified, moving to I, waiting for put ack";
    SI_A,   AccessPermission:Read_Only,
                desc="Was shared, moving to I, waiting for put ack";
    II_A,   AccessPermission:Invalid,
                desc="Sent valid data before receiving put ack. ";
                // "Waiting for put ack.";
  }

  enumeration(Event, desc="Cache events") {
    // From the processor/sequencer/mandatory queue
    Load,           desc="Load from processor";
    Store,          desc="Store from processor";
    PutM,           desc="...";
    Stall,          desc="Stall...";

    // Internal event (only triggered from processor requests)
    Replacement,    desc="Triggered when block is chosen as victim";

    // Forwarded request from other cache via dir on the forward network
    // In our case, this is similar to the OtherGetS/M in the primer
    FwdGetS,        desc="Directory sent us a request to satisfy GetS. We must have the block in M to respond to this.";
    FwdGetM,        desc="Directory sent us a request to satisfy GetM. We must have the block in M to respond to this.";
    // In our case, this is similar to the OtherGetM in the primer
    Inv,            desc="Invalidate from the directory.";
    PutAck,         desc="Response from directory after we issue a put. This must be on the fwd network to avoid deadlock.";

    // Responses from directory
    DataDirNoAcks,  desc="Data from directory (acks = 0)";
    DataDirAcks,    desc="Data from directory (acks > 0)";

    // Responses from other caches
    DataOwner,      desc="Data from owner";
    InvAck,         desc="Invalidation ack from other cache after Inv";

    // Special event to simplify implementation
    LastInvAck,     desc="Triggered after the last ack is received";

    WB_Data,        desc="";
  }
  structure(Entry, desc="Cache entry", interface="AbstractCacheEntry") {
    State CacheState,        desc="cache state";
    DataBlock DataBlk,       desc="Data in the block";
  }

  structure(TBE, desc="Entry for transient requests") {
    State TBEState,         desc="State of block";
    DataBlock DataBlk,      desc="Data for the block. Needed for MI_A";
    int AcksOutstanding, default=0, desc="Number of acks left to receive.";
  }
  structure(TBETable, external="yes") {
    TBE lookup(Addr);
    void allocate(Addr);
    void deallocate(Addr);
    bool isPresent(Addr);
    int cnt();
  }
  TBETable TBEs, template="<L1Cache_TBE>", constructor="m_number_of_TBEs";
  Tick clockEdge();

  void set_cache_entry(AbstractCacheEntry a);
  void unset_cache_entry();
  void set_tbe(TBE b);
  void unset_tbe();
  Tick cyclesToTicks(Cycles c);
  Cycles ticksToCycles(Tick t);
  void wakeUpBuffers(Addr a);
  // void wakeUpAllBuffers(Addr a);
  void wakeUpAllBuffers();
  void heheheheh();
  
  // void hehehe();
  MachineID mapAddressToMachine(Addr addr, MachineType mtype);
  
  // Convenience function to look up the cache entry.
  // Needs a pointer so it will be a reference and can be updated in actions
  Entry getCacheEntry(Addr address), return_by_pointer="yes" {
    return static_cast(Entry, "pointer", cacheMemory.lookup(address));
  }

  // getState/setState/getAccessPermission/setAccessPermission/functionRead/Write almost never changes
  State getState(TBE tbe, Entry cache_entry, Addr addr) {
    // The TBE state will override the state in cache memory, if valid
    if (is_valid(tbe)) { return tbe.TBEState; }
    // Next, if the cache entry is valid, it holds the state
    else if (is_valid(cache_entry)) { return cache_entry.CacheState; }
    // If the block isn't present, then it's state must be I.
    else { return State:I; }
  }

  void setState(TBE tbe, Entry cache_entry, Addr addr, State state) {
    if (is_valid(tbe)) { tbe.TBEState := state; }
    if (is_valid(cache_entry)) { cache_entry.CacheState := state; }
  }

  AccessPermission getAccessPermission(Addr addr) {
    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
        return L1Cache_State_to_permission(tbe.TBEState);
    }

    Entry cache_entry := getCacheEntry(addr);
    if(is_valid(cache_entry)) {
        return L1Cache_State_to_permission(cache_entry.CacheState);
    }

    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Entry cache_entry, Addr addr, State state) {
      if (is_valid(cache_entry)) {
          cache_entry.changePermission(L1Cache_State_to_permission(state));
      }
  }

  void functionalRead(Addr addr, Packet *pkt) {
      TBE tbe := TBEs[addr];
      if(is_valid(tbe)) {
          testAndRead(addr, tbe.DataBlk, pkt);
      } else {
          testAndRead(addr, getCacheEntry(addr).DataBlk, pkt);
      }
  }

  int functionalWrite(Addr addr, Packet *pkt) {
      int num_functional_writes := 0;

      TBE tbe := TBEs[addr];
      if(is_valid(tbe)) {
          num_functional_writes := num_functional_writes +
              testAndWrite(addr, tbe.DataBlk, pkt);
          return num_functional_writes;
      }

      num_functional_writes := num_functional_writes +
              testAndWrite(addr, getCacheEntry(addr).DataBlk, pkt);
      return num_functional_writes;
  }

  out_port(request_out, RequestMsg, requestToDir);
  out_port(forwardToL0_out, RequestMsg, forwardToL0);
  out_port(responseToL0_out, ResponseMsg, responseToL0);

  out_port(response_out, ResponseMsg, responseToDirOrSibling);
  out_port(response_out_bus, ResponseMsg, responseToDirOnly);


  in_port(responseFromL0_in, ResponseMsg, responseFromL0) {
    if(responseFromL0_in.isReady(clockEdge())) {
        peek(responseFromL0_in, ResponseMsg) {
            Entry cache_entry := getCacheEntry(in_msg.addr);
            TBE tbe := TBEs[in_msg.addr];
            if(in_msg.Type == CoherenceResponseType:Data) {
                trigger(Event:WB_Data, in_msg.addr, cache_entry,
                                tbe);   
            } else {
                error("Unrecognized event from L0");
            }
            /*
            else if(in_msg.Type == CoherenceResponseType:Ack) {
                trigger(Event:L0_Ack, in_msg.addr, cache_entry,
                                tbe);   
            }
            */
        }
    }
  }
  
  // in_port
  in_port(response_in_bus, ResponseMsg, responseFromDirOnly) {
      if (response_in_bus.isReady(clockEdge())) {
          peek(response_in_bus, ResponseMsg) { // in_msg is implied
              Entry cache_entry := getCacheEntry(in_msg.addr);
              TBE tbe := TBEs[in_msg.addr];
              assert(is_valid(tbe));

              if (machineIDToMachineType(in_msg.Sender) ==
                          MachineType:Directory) {
                  if (in_msg.Type != CoherenceResponseType:Data) {
                      error("Directory should only reply with data");
                  }
                  assert(in_msg.Acks + tbe.AcksOutstanding >= 0);
                  if (in_msg.Acks + tbe.AcksOutstanding == 0) {
                      trigger(Event:DataDirNoAcks, in_msg.addr, cache_entry,
                              tbe);
                  } else {
                      trigger(Event:DataDirAcks, in_msg.addr, cache_entry,
                              tbe);
                  }
              }
          }
      }
  }
  in_port(response_in, ResponseMsg, responseFromDirOrSibling) {
      if (response_in.isReady(clockEdge())) {
          peek(response_in, ResponseMsg) { // in_msg is implied
              Entry cache_entry := getCacheEntry(in_msg.addr);
              TBE tbe := TBEs[in_msg.addr];
              assert(is_valid(tbe));

              if (machineIDToMachineType(in_msg.Sender) ==
                          MachineType:Directory) {
                  if (in_msg.Type != CoherenceResponseType:Data) {
                      error("Directory should only reply with data");
                  }
                  assert(in_msg.Acks + tbe.AcksOutstanding >= 0);
                  if (in_msg.Acks + tbe.AcksOutstanding == 0) {
                      trigger(Event:DataDirNoAcks, in_msg.addr, cache_entry,
                              tbe);
                  } else {
                      trigger(Event:DataDirAcks, in_msg.addr, cache_entry,
                              tbe);
                  }
              } else {
                  if (in_msg.Type == CoherenceResponseType:Data) {
                      trigger(Event:DataOwner, in_msg.addr, cache_entry,
                              tbe);
                  } else if (in_msg.Type == CoherenceResponseType:InvAck) {
                      DPRINTF(RubySlicc, "Got inv ack. %d left\n",
                              tbe.AcksOutstanding);
                      if (tbe.AcksOutstanding == 1) {
                          trigger(Event:LastInvAck, in_msg.addr, cache_entry,
                                  tbe);
                      } else {
                          trigger(Event:InvAck, in_msg.addr, cache_entry,
                                  tbe);
                      }
                  } else {
                      error("Unexpected response from other cache");
                  }
              }
          }
      }
  }

  in_port(forward_in, RequestMsg, forwardFromDir, rank=1) {
    if(forward_in.isReady(clockEdge())) {
      peek(forward_in, RequestMsg) {
        Entry cache_entry := getCacheEntry(in_msg.addr);
        TBE tbe := TBEs[in_msg.addr];

        if(in_msg.Type == CoherenceRequestType:GetS) {
          trigger(Event:FwdGetS, in_msg.addr, cache_entry, tbe);
        } else if(in_msg.Type == CoherenceRequestType:GetM) {
          trigger(Event:FwdGetM, in_msg.addr, cache_entry, tbe);
        } else if (in_msg.Type == CoherenceRequestType:Inv) {
            trigger(Event:Inv, in_msg.addr, cache_entry, tbe);
        } else if (in_msg.Type == CoherenceRequestType:PutAck) {
            trigger(Event:PutAck, in_msg.addr, cache_entry, tbe);
        } else {
            error("Unexpected forward message!");
        }
      }
    }
  }


  in_port(requestFromL0_in, RequestMsg, requestFromL0) {
    if(requestFromL0_in.isReady(clockEdge())) {
      peek(requestFromL0_in, RequestMsg) {
        
        Entry cache_entry := getCacheEntry(in_msg.addr);
        TBE tbe := TBEs[in_msg.addr];
        if(TBEs.cnt() > 0) {
            // only 1 outstanding request
            // TODO: relax this constraint
            trigger(Event:Stall, in_msg.addr, cache_entry,
                    tbe);
        } else {
            if(in_msg.Type == CoherenceRequestType:PutM) {
                    trigger(Event:PutM, in_msg.addr, cache_entry, tbe);
            } else {
                if(is_invalid(cache_entry) && cacheMemory.cacheAvail(in_msg.addr) == false) {
                    Addr addr := cacheMemory.cacheProbe(in_msg.addr);
                    Entry victim_entry := getCacheEntry(addr);
                    TBE victim_tbe := TBEs[addr];

                    trigger(Event:Replacement, addr, victim_entry, victim_tbe);
                    // remember to NOT pop the message!
                } else {
                    if (in_msg.Type == CoherenceRequestType:GetS) {
                        trigger(Event:Load, in_msg.addr, cache_entry,
                                tbe);
                    } else if (in_msg.Type == CoherenceRequestType:GetM) {
                        trigger(Event:Store, in_msg.addr, cache_entry,
                                tbe);
                    

                    } else {
                        error("Unexpected type from processor");
                    }
                }
            }
        }
      }
    }
  }

  action(guardSplitBus, "isSB", desc="Guard that this transition only happens in a split bus setup") {
    assert(splitBus);
  }

  action(sendGetS, 'gS', desc="Send GetS to the directory") {
    enqueue(request_out, RequestMsg, 1) {
      // address, cache_entry, tbe
      out_msg.addr := address;
      out_msg.Type := CoherenceRequestType:GetS;
      out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
      out_msg.MessageSize := MessageSizeType:Control;
      out_msg.Requestor := machineID;
      out_msg.is_reordered := false;
    }
  }
  action(sendGetM, "gM", desc="Send GetM to the directory") {
    enqueue(request_out, RequestMsg, 1) {
        out_msg.addr := address;
        out_msg.Type := CoherenceRequestType:GetM;
        out_msg.Destination.add(mapAddressToMachine(address,
                                MachineType:Directory));
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.Requestor := machineID;
        out_msg.is_reordered := false;
    }
  }

  action(sendPutS, "pS", desc="Send PutS to the directory") {
      assert(is_valid(cache_entry));
      enqueue(request_out, RequestMsg, 1) {
        out_msg.addr := address;
        out_msg.Type := CoherenceRequestType:PutS;
        out_msg.Destination.add(mapAddressToMachine(address,
                                MachineType:Directory));
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.Requestor := machineID;
        out_msg.is_reordered := false;
        out_msg.isWritebackRequest := true;
      }
  }

  action(sendPutM, "pM", desc="Send putM+data to the directory") {
      assert(is_valid(cache_entry));
      enqueue(request_out, RequestMsg, 1) {
          out_msg.addr := address;
          out_msg.Type := CoherenceRequestType:PutM;
          out_msg.Destination.add(mapAddressToMachine(address,
                                  MachineType:Directory));
          out_msg.DataBlk := cache_entry.DataBlk;
          out_msg.MessageSize := MessageSizeType:Data;
          out_msg.Requestor := machineID;
          out_msg.is_reordered := false;
          out_msg.isWritebackRequest := true;
      }
  }
  action(sendCacheDataToReq, "cdR", desc="Send cache data to requestor") {
    assert(is_valid(cache_entry));
    // in_message & out_message
    peek(forward_in, RequestMsg) {
        // if we are targeting bus
        // if(machineIDToMachineType(in_msg.Requestor) == MachineType::Directory) {
        if(splitBus && (machineIDToMachineType(in_msg.Requestor) == MachineType:Directory) ) {
          // This only happens in GetM
          enqueue(response_out_bus, ResponseMsg, 1) {
              out_msg.addr := address;
              out_msg.Type := CoherenceResponseType:Data;
              out_msg.Destination.add(in_msg.Requestor);
              out_msg.DataBlk := cache_entry.DataBlk;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Sender := machineID;
              // used in the TDMSwitch for response aribtration
              out_msg.OriginalRequestor := in_msg.OriginalRequestor;

              DPRINTF(RubySlicc, "in_msg: %s\n", in_msg);
              DPRINTF(RubySlicc, "out_msg: %s\n", out_msg);
          }
        } else {
          enqueue(response_out, ResponseMsg, 1) {
              out_msg.addr := address;
              out_msg.Type := CoherenceResponseType:Data;
              out_msg.Destination.add(in_msg.Requestor);
              out_msg.DataBlk := cache_entry.DataBlk;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Sender := machineID;
          }
        }
    }
  }
  // M, only used in FwdGetS
  action(sendCacheDataToDir, "cdD", desc="Send the cache data to the dir") {
    if(splitBus) {
      peek(forward_in, RequestMsg) {
        enqueue(response_out_bus, ResponseMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceResponseType:Data;
            out_msg.Destination.add(mapAddressToMachine(address,
                                    MachineType:Directory));
            out_msg.DataBlk := cache_entry.DataBlk;
            out_msg.MessageSize := MessageSizeType:Data;
            out_msg.Sender := machineID;
            out_msg.OriginalRequestor := in_msg.OriginalRequestor;
        }
      }
    } else {
      enqueue(response_out, ResponseMsg, 1) {
          out_msg.addr := address;
          out_msg.Type := CoherenceResponseType:Data;
          out_msg.Destination.add(mapAddressToMachine(address,
                                  MachineType:Directory));
          out_msg.DataBlk := cache_entry.DataBlk;
          out_msg.MessageSize := MessageSizeType:Data;
          out_msg.Sender := machineID;
      }
    }
  }

  action(sendInvAcktoReq, "iaR", desc="Send inv-ack to requestor") {
    peek(forward_in, RequestMsg) {
        enqueue(response_out, ResponseMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceResponseType:InvAck;
            out_msg.Destination.add(in_msg.Requestor);
            out_msg.DataBlk := cache_entry.DataBlk;
            out_msg.MessageSize := MessageSizeType:Control;
            out_msg.Sender := machineID;
        }
    }
  }

  action(decrAcks, "da", desc="Decrement the number of acks") {
    assert(is_valid(tbe));
    tbe.AcksOutstanding := tbe.AcksOutstanding - 1;
    APPEND_TRANSITION_COMMENT("Acks: ");
    APPEND_TRANSITION_COMMENT(tbe.AcksOutstanding);
  }

  action(storeAcks, "sa", desc="Store the needed acks to the TBE") {
    assert(is_valid(tbe));
    if(splitBus) {
        peek(response_in_bus, ResponseMsg) {
            tbe.AcksOutstanding := in_msg.Acks + tbe.AcksOutstanding;
        }
    } else {
        peek(response_in, ResponseMsg) {
            tbe.AcksOutstanding := in_msg.Acks + tbe.AcksOutstanding;
        }
    }
    assert(tbe.AcksOutstanding > 0);
  }
  action(loadHit, "Lh", desc="Load hit") {
    assert(is_valid(cache_entry));
    cacheMemory.setMRU(cache_entry);
    enqueue(responseToL0_out, ResponseMsg, 1) {
        out_msg.addr := address;
        out_msg.DataBlk := cache_entry.DataBlk;
        out_msg.Type := CoherenceResponseType:Data;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
        out_msg.MessageSize := MessageSizeType:Data;
    }
  }
  action(loadHitM, "Lhm", desc="Load hit") {
    assert(is_valid(cache_entry));
    cacheMemory.setMRU(cache_entry);
    enqueue(responseToL0_out, ResponseMsg, 1) {
        out_msg.addr := address;
        out_msg.DataBlk := cache_entry.DataBlk;
        out_msg.Type := CoherenceResponseType:ExData;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
        out_msg.MessageSize := MessageSizeType:Data;
    }
  }
  action(externalLoadHitM, "xLhM", desc="External load hit (was a miss), and the data may be from the bus") {
    // we won't be reading anything from the response bus
    assert(is_valid(cache_entry));
    enqueue(responseToL0_out, ResponseMsg, 1) {
        out_msg.addr := address;
        out_msg.DataBlk := cache_entry.DataBlk;
        out_msg.Type := CoherenceResponseType:ExData;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
        out_msg.MessageSize := MessageSizeType:Data;
    }
  }

  action(externalLoadHit, "xLh", desc="External load hit (was a miss), and the data may be from the bus") {
    // we won't be reading anything from the response bus
    assert(is_valid(cache_entry));
    enqueue(responseToL0_out, ResponseMsg, 1) {
        out_msg.addr := address;
        out_msg.DataBlk := cache_entry.DataBlk;
        out_msg.Type := CoherenceResponseType:Data;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
        out_msg.MessageSize := MessageSizeType:Data;
    }
    // if(splitBus) {
    //     peek(response_in_bus, ResponseMsg) { // this is from the directory
    //         cacheMemory.setMRU(cache_entry);
    //         // Forward the type of machine that responded to this request
    //         // E.g., another cache or the directory. This is used for tracking
    //         // statistics.
    //         enqueue(responseToL0_out, ResponseMsg, 1) {
    //             out_msg.addr := address;
    //             out_msg.DataBlk := cache_entry.DataBlk;
    //             out_msg.Type := CoherenceResponseType:Data;
    //             out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
    //             out_msg.MessageSize := MessageSizeType:Data;
    //         }
    //     }
    // } else {
    //     peek(response_in, ResponseMsg) { // this is from the directory
    //         cacheMemory.setMRU(cache_entry);
    //         // Forward the type of machine that responded to this request
    //         // E.g., another cache or the directory. This is used for tracking
    //         // statistics.
    //         enqueue(responseToL0_out, ResponseMsg, 1) {
    //             out_msg.addr := address;
    //             out_msg.DataBlk := cache_entry.DataBlk;
    //             out_msg.Type := CoherenceResponseType:Data;
    //             out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
    //             out_msg.MessageSize := MessageSizeType:Data;
    //         }
    //     }
    // }
  }
  action(storeHit, "Sh", desc="Store hit") {
    assert(is_valid(cache_entry));
    cacheMemory.setMRU(cache_entry);
    // The same as the read callback above.
    enqueue(responseToL0_out, ResponseMsg, 1) {
        out_msg.addr := address;
        out_msg.DataBlk := cache_entry.DataBlk;
        out_msg.Type := CoherenceResponseType:Data;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
        out_msg.MessageSize := MessageSizeType:Data;
    }
}

  action(externalStoreHit, "xShd", desc="External store hit (was a miss)") {
      assert(is_valid(cache_entry));
      cacheMemory.setMRU(cache_entry);
      enqueue(responseToL0_out, ResponseMsg, 1) {
          out_msg.addr := address;
          out_msg.DataBlk := cache_entry.DataBlk;
          out_msg.Type := CoherenceResponseType:Data;
          out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
          out_msg.MessageSize := MessageSizeType:Data;
      }

      // if(splitBus) {
      //   peek(response_in_bus, ResponseMsg) {
      //       cacheMemory.setMRU(cache_entry);
      //       enqueue(responseToL0_out, ResponseMsg, 1) {
      //           out_msg.addr := address;
      //           out_msg.DataBlk := cache_entry.DataBlk;
      //           out_msg.Type := CoherenceResponseType:Data;
      //           out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
      //           out_msg.MessageSize := MessageSizeType:Data;
      //       }
      //   }
      // } else {
      //   peek(response_in, ResponseMsg) {
      //       cacheMemory.setMRU(cache_entry);
      //       enqueue(responseToL0_out, ResponseMsg, 1) {
      //           out_msg.addr := address;
      //           out_msg.DataBlk := cache_entry.DataBlk;
      //           out_msg.Type := CoherenceResponseType:Data;
      //           out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
      //           out_msg.MessageSize := MessageSizeType:Data;
      //       }
      //   }
      // }
  }

  action(forwardEviction, "e", desc="sends eviction notification to CPU") {
    // if (send_evictions) {
    //     sequencer.evictionCallback(address);
    // }
  }
  action(allocateCacheBlock, "a", desc="Allocate a cache block") {
    assert(is_invalid(cache_entry));
    assert(cacheMemory.cacheAvail(address));
    set_cache_entry(cacheMemory.allocate(address, new Entry));
  }

  action(deallocateCacheBlock, "d", desc="Deallocate a cache block") {
    assert(is_valid(cache_entry));
    cacheMemory.deallocate(address);
    // clear the cache_entry variable (now it's invalid)
    unset_cache_entry();
  }

  // the response should be from a peer, could happen in both split bus or non split bus case
  action(writeDataToCache, "wd", desc="Write data to the cache") {
    peek(response_in, ResponseMsg) {
        assert(is_valid(cache_entry));
        cache_entry.DataBlk := in_msg.DataBlk;
    }
  }
  // the response could be from bus or from C2C interconnect
  action(writeDataToCacheFromDir, "wdd", desc="Write data to the cache") {
    if(splitBus) {
        peek(response_in_bus, ResponseMsg) {
            assert(is_valid(cache_entry));
            cache_entry.DataBlk := in_msg.DataBlk;
        }
    } else {
        peek(response_in, ResponseMsg) {
            assert(is_valid(cache_entry));
            cache_entry.DataBlk := in_msg.DataBlk;
        }       
    }
  }

  action(writebackPutDataToCache, "wbd", desc="Write data from Private cache") {
    peek(requestFromL0_in, RequestMsg) {
        cache_entry.DataBlk := in_msg.DataBlk;
    }
  }
  action(writebackRespDataToCache, "wbrd", desc="Write data from Private cache") {
    peek(responseFromL0_in, ResponseMsg) {
        cache_entry.DataBlk := in_msg.DataBlk;
    }
  }
  action(writebackPutDataToTBE, "wbdt", desc="Write data from Private cache") {
    peek(requestFromL0_in, RequestMsg) {
        tbe.DataBlk := in_msg.DataBlk;
    }
  }
  action(writebackRespDataToTBE, "wbrdt", desc="Write data from Private cache") {
    peek(responseFromL0_in, ResponseMsg) {
        tbe.DataBlk := in_msg.DataBlk;
    }
  }

  action(allocateTBE, "aT", desc="Allocate TBE") {
    assert(is_invalid(tbe));
    TBEs.allocate(address);
    // this updates the tbe variable for other actions
    set_tbe(TBEs[address]);
  }

  action(deallocateTBE, "dT", desc="Deallocate TBE") {
      assert(is_valid(tbe));
      TBEs.deallocate(address);
      // this makes the tbe variable invalid
      unset_tbe();
  }

  action(copyDataFromCacheToTBE, "Dct", desc="Copy data from cache to TBE") {
      assert(is_valid(cache_entry));
      assert(is_valid(tbe));
      tbe.DataBlk := cache_entry.DataBlk;
  }

  action(popMandatoryQueue, "pQ", desc="Pop the mandatory queue") {
    requestFromL0_in.dequeue(clockEdge());
  }

  action(popResponseQueue, "pR", desc="Pop the response queue") {
      response_in.dequeue(clockEdge());
  }

  action(popDirResponseQueue, "pdR", desc="Pop the response queue for directory") {
    if(splitBus) {
      response_in_bus.dequeue(clockEdge());
    } else {
      response_in.dequeue(clockEdge());
    }
  }

  action(popForwardQueue, "pF", desc="Pop the forward queue") {
      forward_in.dequeue(clockEdge());
  }

  action(popL0ResponseQueue, "pRR", desc="") {
    responseFromL0_in.dequeue(clockEdge());
  }

  action(stall, "z", desc="Stall the incoming request") {
    peek(requestFromL0_in, RequestMsg) {
        Addr a := in_msg.addr;
        stall_and_wait(requestFromL0_in, a);
    }
  }
  action(stall_fwd, "zfwd", desc="Stall forward") {
    stall_and_wait(forward_in, address);
  }

  action(kd_wakeUpDependents, "kd", desc="Wake-up dependents") {
    wakeUpAllBuffers();
    // wakeUpAllBuffers(address);
  }
  action(tic, "dtic", desc="Start timing") {
    if(TBEs.cnt() == 0) {
        xyzStatsObject.tic();
    }
  }
  action(toc, "dtoc", desc="Start timing") {
    xyzStatsObject.toc();
  }
  action(forwardInvToL0, "fil", desc="") {
    peek(forward_in, RequestMsg) {
        enqueue(forwardToL0_out, RequestMsg) {
            out_msg.addr := in_msg.addr;
            out_msg.Type := CoherenceRequestType:Inv;
            out_msg.Requestor := machineID;
            out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
            out_msg.MessageSize := MessageSizeType:Control;
        }
    }
  }
  action(sendInvToL0, "sil", desc="") {
    assert(is_valid(cache_entry));
    enqueue(forwardToL0_out, RequestMsg) {
        out_msg.addr := address;
        out_msg.Type := CoherenceRequestType:Inv;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, version));
        out_msg.MessageSize := MessageSizeType:Control;
    }
  }
  transition(I, Load, IS_D) {
    tic;
    allocateCacheBlock;
    allocateTBE;
    sendGetS;
    popMandatoryQueue;
  }
  transition(I, Store, IM_AD) {
    tic;
    allocateCacheBlock;
    allocateTBE;
    sendGetM;
    popMandatoryQueue;
  }

  transition(IS_D, {Load, Store, Replacement}) {
    stall;
  }
  
  transition(IS_D, Inv) {
    stall_fwd;
  }

  // PMSI* fix
  transition(IS_D, DataOwner, M_P) {
    toc;
    writeDataToCache;
    deallocateTBE;
    externalLoadHitM;
    popResponseQueue;
    kd_wakeUpDependents;
  }

  transition(IS_D, DataDirNoAcks, S) {
    toc;
    writeDataToCacheFromDir;
    deallocateTBE;
    externalLoadHit;
    popDirResponseQueue;
    kd_wakeUpDependents;
  }

  transition({IM_AD, IM_A}, {FwdGetS, FwdGetM}) {
        stall_fwd;
      // stall;
  }
  // PMSI* fix
  // as if this is an M state
  transition(IS_D, {FwdGetM, FwdGetS}) {
    stall_fwd;
  }
  transition({IM_AD, IM_A}, {Load, Store, Replacement}) {
    stall;
  }

  transition({IM_AD, SM_AD}, DataOwner, M_P) {
    toc;
      writeDataToCache;
      deallocateTBE;
      externalStoreHit;
      popResponseQueue;
    kd_wakeUpDependents;
  }
  transition({IM_AD, SM_AD}, DataDirNoAcks, M_P) {
    toc;
      writeDataToCacheFromDir;
      deallocateTBE;
      externalStoreHit;
      popDirResponseQueue;
    kd_wakeUpDependents;
  }

  transition(IM_AD, DataDirAcks, IM_A) {
      writeDataToCacheFromDir;
      storeAcks;
      // popResponseQueue;
      popDirResponseQueue;
      // kd_wakeUpDependents;
  }

  transition({IM_AD, IM_A, SM_AD, SM_A}, InvAck) {
      decrAcks;
      popResponseQueue;
  }

  transition({IM_A, SM_A}, LastInvAck, M_P) {
    toc;
      deallocateTBE;
      externalStoreHit;
      popResponseQueue;
    kd_wakeUpDependents;
  }

  transition({S, SM_AD, SM_A}, Load) {
      loadHit;
      popMandatoryQueue;
  }
  transition(M, Load, M_P) {
    loadHitM;
    popMandatoryQueue;
  }

  transition(S, Store, SM_AD) {
    tic;
      allocateTBE;
      sendGetM;
      popMandatoryQueue;
  }

  transition(S, Replacement, SI_A) {
    sendInvToL0;
    tic;
      sendPutS;
      forwardEviction;
  }

  transition(S, Inv, I) {
      sendInvToL0;
      sendInvAcktoReq;
      deallocateCacheBlock;
      forwardEviction;
      popForwardQueue;
  }

  transition({SM_AD, SM_A}, {FwdGetS, FwdGetM}) {
    stall_fwd;
      // stall;
  }
  transition(MP_D, {FwdGetS, FwdGetM}) {
    stall_fwd;
  }
transition({SM_AD, SM_A}, {Store, Replacement}) {
      stall;
  }

  transition(SM_AD, Inv, IM_AD) {
      sendInvAcktoReq;
      forwardEviction;
      popForwardQueue;
      // kd_wakeUpDependents;
  }

  transition(SM_AD, DataDirAcks, SM_A) {
      writeDataToCacheFromDir;
      storeAcks;
      popDirResponseQueue;
      // kd_wakeUpDependents;
  }

  transition(M, Store, M_P) {
      storeHit;
      popMandatoryQueue;
  }
  // PMSI* fix
  // this could happen when a fast upgrading precedes
  transition(M_P, Store) {
      storeHit;
      popMandatoryQueue;
  }

  transition(M, Replacement, MI_A) {
    // sendInvToL0;
    tic;
      sendPutM;
      forwardEviction;
  }

  // PMSI* fix
  // transition(M, FwdGetS, S) {
  //   // sendInvToL0;
  //     sendCacheDataToReq;  // first send to requestor (must be on c2c)
  //     sendCacheDataToDir;  // then send to directory
  //     popForwardQueue;
  // }

  transition(M_P, {FwdGetS,FwdGetM}, MP_D) {
    forwardInvToL0;
    stall_fwd;
  }
  transition(M_P, Replacement, MP_D) {
    sendInvToL0;
  }

  // PMSI* fix
  transition(M, {FwdGetM, FwdGetS}, I) {
      // sendInvToL0;
      sendCacheDataToReq;  // could send to directory, or the requestor
      deallocateCacheBlock;
      popForwardQueue;
  }

  transition({MI_A, SI_A, II_A, MP_D}, {Load, Store, Replacement}) {
      stall;
  }

  transition(MI_A, FwdGetS, SI_A) {
      sendCacheDataToReq;
      sendCacheDataToDir;
      popForwardQueue;
      // kd_wakeUpDependents;
  }

  transition(MI_A, FwdGetM, II_A) {
      sendCacheDataToReq;
      popForwardQueue;
      // kd_wakeUpDependents;
  }

  transition({MI_A, SI_A, II_A}, PutAck, I) {
      deallocateCacheBlock;
      popForwardQueue;
    kd_wakeUpDependents;
  }

  transition(SI_A, Inv, II_A) {
      sendInvAcktoReq;
      popForwardQueue;
      // kd_wakeUpDependents;
  }

  transition(M_P, PutM, M) {
    writebackPutDataToCache;
    popMandatoryQueue;
  }

  transition(MP_D, PutM, M) {
    writebackPutDataToCache;
    popMandatoryQueue;
    kd_wakeUpDependents;
  }
  transition({M_P, MP_D}, WB_Data,M) {
    writebackRespDataToCache;
    popL0ResponseQueue;
    kd_wakeUpDependents;
  }

  transition({I,M,S,SI_A,II_A,SM_AD,IM_AD,IM_A,SM_A,MI_A}, Stall) {
    stall;
  }
}